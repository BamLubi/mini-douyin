// Code generated by Kitex v0.4.4. DO NOT EDIT.

package socityservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	socitydouyin "mini-douyin/cmd/socity/kitex_gen/socitydouyin"
)

func serviceInfo() *kitex.ServiceInfo {
	return socityServiceServiceInfo
}

var socityServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SocityService"
	handlerType := (*socitydouyin.SocityService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newSocityServiceFavoriteActionArgs, newSocityServiceFavoriteActionResult, false),
		"CommentAction":  kitex.NewMethodInfo(commentActionHandler, newSocityServiceCommentActionArgs, newSocityServiceCommentActionResult, false),
		"CommentList":    kitex.NewMethodInfo(commentListHandler, newSocityServiceCommentListArgs, newSocityServiceCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "socitydouyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*socitydouyin.SocityServiceFavoriteActionArgs)
	realResult := result.(*socitydouyin.SocityServiceFavoriteActionResult)
	success, err := handler.(socitydouyin.SocityService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocityServiceFavoriteActionArgs() interface{} {
	return socitydouyin.NewSocityServiceFavoriteActionArgs()
}

func newSocityServiceFavoriteActionResult() interface{} {
	return socitydouyin.NewSocityServiceFavoriteActionResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*socitydouyin.SocityServiceCommentActionArgs)
	realResult := result.(*socitydouyin.SocityServiceCommentActionResult)
	success, err := handler.(socitydouyin.SocityService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocityServiceCommentActionArgs() interface{} {
	return socitydouyin.NewSocityServiceCommentActionArgs()
}

func newSocityServiceCommentActionResult() interface{} {
	return socitydouyin.NewSocityServiceCommentActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*socitydouyin.SocityServiceCommentListArgs)
	realResult := result.(*socitydouyin.SocityServiceCommentListResult)
	success, err := handler.(socitydouyin.SocityService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSocityServiceCommentListArgs() interface{} {
	return socitydouyin.NewSocityServiceCommentListArgs()
}

func newSocityServiceCommentListResult() interface{} {
	return socitydouyin.NewSocityServiceCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, req *socitydouyin.FavoriteActionRequest) (r *socitydouyin.FavoriteActionResponse, err error) {
	var _args socitydouyin.SocityServiceFavoriteActionArgs
	_args.Req = req
	var _result socitydouyin.SocityServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *socitydouyin.CommentActionRequest) (r *socitydouyin.CommentActionResponse, err error) {
	var _args socitydouyin.SocityServiceCommentActionArgs
	_args.Req = req
	var _result socitydouyin.SocityServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *socitydouyin.CommentListRequest) (r *socitydouyin.CommentListResponse, err error) {
	var _args socitydouyin.SocityServiceCommentListArgs
	_args.Req = req
	var _result socitydouyin.SocityServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
