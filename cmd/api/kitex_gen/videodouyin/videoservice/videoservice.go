// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	videodouyin "mini-douyin/cmd/api/kitex_gen/videodouyin"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*videodouyin.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":          kitex.NewMethodInfo(feedHandler, newVideoServiceFeedArgs, newVideoServiceFeedResult, false),
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newVideoServicePublishActionArgs, newVideoServicePublishActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "videodouyin",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodouyin.VideoServiceFeedArgs)
	realResult := result.(*videodouyin.VideoServiceFeedResult)
	success, err := handler.(videodouyin.VideoService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return videodouyin.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return videodouyin.NewVideoServiceFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*videodouyin.VideoServicePublishActionArgs)
	realResult := result.(*videodouyin.VideoServicePublishActionResult)
	success, err := handler.(videodouyin.VideoService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionArgs() interface{} {
	return videodouyin.NewVideoServicePublishActionArgs()
}

func newVideoServicePublishActionResult() interface{} {
	return videodouyin.NewVideoServicePublishActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, req *videodouyin.FeedRequest) (r *videodouyin.FeedResponse, err error) {
	var _args videodouyin.VideoServiceFeedArgs
	_args.Req = req
	var _result videodouyin.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *videodouyin.PublishActionRequest) (r *videodouyin.PublishActionResponse, err error) {
	var _args videodouyin.VideoServicePublishActionArgs
	_args.Req = req
	var _result videodouyin.VideoServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
